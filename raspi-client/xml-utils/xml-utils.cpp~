/*===============================================================================

  Project: SmartFog
  File: xmlConfig.cpp

  Copyright (c) 2020, University of Córdoba, The Advanced Informatics Research Group (GIIA).

  All rights reserved. This is propietary software. In no event shall the author
  be liable for any claim or damages.

===============================================================================*/

#include "xml-utils.hpp"

xmlConfig_t * newXmlConfig()
{
  xmlConfig_t *xmlConfig = (xmlConfig_t *) malloc(sizeof(xmlConfig_t));

  return xmlConfig;  
}

void freeXmlConfig(xmlConfig_t * xmlConfig)
{
  free(xmlConfig);
}

xmlConfig_t * initXmlConfig(char *ip, int port, int numRows,
			    int numRowsReduction, int numCols,
			    int numColsReduction, int fps,
			    int inColor, int colorReduction,
			    xmlConfig_t *xmlConfig)
{  
  strcpy(xmlConfig->ip, ip);
  xmlConfig->port             = port;
  xmlConfig->numRows          = numRows;
  xmlConfig->numRowsReduction = numRowsReduction;
  xmlConfig->numCols          = numCols;
  xmlConfig->numColsReduction = numColsReduction;
  xmlConfig->fps              = fps;
  xmlConfig->inColor          = inColor;
  xmlConfig->colorReduction   = colorReduction;
  
  return xmlConfig;
}



int readXmlConfig(const char *inputFile, xmlConfig_t *xmlConfig)
{
  
  XMLDocument xmlDocRead; // Documento XML.
  XMLError eResultRead;  // Comprobacion errores.
  XMLNode *pRootRead; // Nodo padre XML.
  XMLElement *pElementRead; // Nodos que cuelgan del padre.
  
  const char *resolution, *resolutionReduce;
  char ip[20];
  int port, numRows, numRowsReduction,
      numCols, numColsReduction, fps,
      colorReduction, inColor;
  
  //Lectura del fichero XML
  eResultRead = xmlDocRead.LoadFile(inputFile);
  
  //Comprobación de errores
  XMLCheckResult(eResultRead); 
  
  //Comprobacion del nodo padre
  pRootRead = xmlDocRead.FirstChild(); 
  if (pRootRead == nullptr)
  {
    std::cout<<"Error al leer el nodo padre.\n";
    return XML_ERROR_FILE_READ_ERROR;
  }
  
  //Extracción de la IP
  pElementRead = pRootRead->FirstChildElement("IpToSend"); 
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"IpToSend\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  strcpy(ip, pElementRead->GetText());
  
  //Extracción del Puerto
  pElementRead = pRootRead->FirstChildElement("PortToSend"); 
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"PortToSend\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  eResultRead = pElementRead->QueryIntText(&port);
  XMLCheckResult(eResultRead);
  
  //Extracción del número de Filas y de Columnas
  pElementRead = pRootRead->FirstChildElement("ResolutionToSend");
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"ResolutionToSend\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  resolution = pElementRead->GetText();
  sscanf(resolution, "%dx%d", &numRows, &numCols);
  
  //Extracción de los FPs
  pElementRead = pRootRead->FirstChildElement("FramesPerSecond");
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"FramesPerSecond\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  eResultRead = pElementRead->QueryIntText(&fps);
  XMLCheckResult(eResultRead);
  
  //Extracción del parametro en color
  pElementRead = pRootRead->FirstChildElement("ColorImage");
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"ColorImage\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  eResultRead = pElementRead->QueryIntText(&inColor);
  XMLCheckResult(eResultRead);

  //Extracción del número de Filas y de Columnas a reducir
  pElementRead = pRootRead->FirstChildElement("ReducedSpatialResolution");
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"ReducedSpatialResolution\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  resolutionReduce = pElementRead->GetText();
  sscanf(resolutionReduce, "%dx%d", &numRowsReduction, &numColsReduction);

  //Extracción del parametro del color a reducir
  pElementRead = pRootRead->FirstChildElement("ReducedColorResolutionInBits");
  if (pElementRead == nullptr)
  {
    std::cout<<"Error al leer el nodo hijo: \"ReducedColorResolutionInBits\".\n";
    return XML_ERROR_PARSING_ELEMENT;
  }
  eResultRead = pElementRead->QueryIntText(&colorReduction);
  XMLCheckResult(eResultRead);

  xmlConfig = initXmlConfig(ip, port, numRows, numRowsReduction,
			    numCols, numColsReduction, fps, inColor,
			    colorReduction, xmlConfig);

  return XML_SUCCESS;  
}


void writeXmlConfig(const char *outputFile, xmlConfig_t *xmlConfig) {

  ofstream newXmlFile;
  
  newXmlFile.open(outputFile);
  newXmlFile << "<Root>\n";  
  newXmlFile << "    <IpToSend>"<< xmlConfig->ip << "</IpToSend>\n";
  newXmlFile << "    <PortToSend>"<< xmlConfig->port << "</PortToSend>\n";
  newXmlFile << "    <ResolutionToSend>"<< xmlConfig->numRows << "x" << xmlConfig->numCols << "</ResolutionToSend>\n";
  newXmlFile << "    <FramesPerSecond>"<< xmlConfig->fps << "</FramesPerSecond>\n";
  newXmlFile << "    <ColorImage>"<< xmlConfig->inColor << "</ColorImage>\n";
  newXmlFile << "    <ReducedSpatialResolution>"<< xmlConfig->numRowsReduction << "x"<< xmlConfig->numColsReduction << "</ReducedSpatialResolution>\n";
  newXmlFile << "    <ReducedColorResolutionInBits>" << xmlConfig->colorReduction << "</ReducedColorResolutionInBits>\n";
  newXmlFile << "</Root>\n";
  
  newXmlFile.close();
  
}


void printXmlConfig(xmlConfig_t *xmlConfig) {

  std::cout << "\n****************************************** \n";
  std::cout << "**  X M L    C O N F I G U R A T I O N  ** \n";
  std::cout << "****************************************** \n";
  std::cout << "  *IP                : " << xmlConfig->ip << "\n";
  std::cout << "  *PORT              : " << xmlConfig->port << "\n";
  std::cout << "  *ROWS              : " << xmlConfig->numRows << "\n";
  std::cout << "  *COLUMNS           : " << xmlConfig->numCols << "\n";
  std::cout << "  *FPS               : " << xmlConfig->fps << "\n";
  std::cout << "  *ROWS REDUCTION    : " << xmlConfig->numRowsReduction << "\n";
  std::cout << "  *COLUMNS REDUCTION : " << xmlConfig->numColsReduction << "\n";
  std::cout << "  *IN COLOR          : " << xmlConfig->inColor << "\n";
  std::cout << "  *COLOR REDUCTION   : " << xmlConfig->colorReduction << "\n";
  std::cout << "****************************************** \n";
  
}

void packXmlConfig(char *dataPack, xmlConfig_t *xmlConfig) {
  
  //*********************************************
  //   B I T S    P A C K    S T R U C T U R E
  //*********************************************
  //Tag:   20x1(char)  8x4(int)    TOTAL
  //Bits:  [16]        [32]     =  [48]

  unsigned char point          = 0;
  const unsigned char sizeType = sizeof(int);
  
  memcpy(&dataPack[point], xmlConfig->ip, 16); //IP (16 bits)
  point += 16;

  memcpy(&dataPack[point], &xmlConfig->port, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->numRows, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->numRowsReduction, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->numCols, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->numColsReduction, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->fps, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->inColor, sizeType);
  point += sizeType;

  memcpy(&dataPack[point], &xmlConfig->colorReduction, sizeType);
  point += sizeType;
  
}

void unpackXmlConfig(char *dataPack, xmlConfig_t *xmlConfig) {

  //*********************************************
  //   B I T S    P A C K    S T R U C T U R E
  //*********************************************
  //Tag:   20x1(char)  8x4(int)    TOTAL
  //Bits:  [16]        [32]     =  [48]

  unsigned char point          = 0;
  const unsigned char sizeType = sizeof(int);
  
  memcpy(xmlConfig->ip, &dataPack[point], 16); //IP (16 bits)
  point += 16;

  memcpy(&xmlConfig->port, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->numRows, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->numRowsReduction, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->numCols, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->numColsReduction, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->fps, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->inColor, &dataPack[point], sizeType);
  point += sizeType;

  memcpy(&xmlConfig->colorReduction, &dataPack[point], sizeType);
  point += sizeType;

}

bool equalXmlConfig(xmlConfig_t *xmlReconfig, xmlConfig_t *xmlConfig)
{

  //if (strcmp(xmlReconfig->ip, xmlConfig->ip) != 0) { return false; }
  //if (xmlReconfig->port != xmlConfig->port) { return false; }

  if (xmlConfig->numRows          != xmlReconfig->numRows)          { return false; }
  if (xmlConfig->numCols          != xmlReconfig->numCols)          { return false; }
  if (xmlConfig->fps              != xmlReconfig->fps)              { return false; }

  if (xmlConfig->numRowsReduction != xmlReconfig->numRowsReduction) { return false; }
  if (xmlConfig->numColsReduction != xmlReconfig->numColsReduction) { return false; }
  if (xmlConfig->colorReduction   != xmlReconfig->colorReduction)   { return false; }

  if (xmlConfig->inColor          != xmlReconfig->inColor)          { return false; }

  return true;
  
}
